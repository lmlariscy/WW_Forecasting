[
  {
    "objectID": "code/processing_final/1_cleaning.html",
    "href": "code/processing_final/1_cleaning.html",
    "title": "Raw data cleaning",
    "section": "",
    "text": "This script does the following:\n\nLoads raw data files\nConverts qPCR non-detects to NAs\nCalculates LOD and LOQ values for all four assays\nBinds all qPCR data sets with WWTP data and calculates Viral Load\nBinds all DPH COVID data"
  },
  {
    "objectID": "code/processing_final/1_cleaning.html#info",
    "href": "code/processing_final/1_cleaning.html#info",
    "title": "Raw data cleaning",
    "section": "",
    "text": "This script does the following:\n\nLoads raw data files\nConverts qPCR non-detects to NAs\nCalculates LOD and LOQ values for all four assays\nBinds all qPCR data sets with WWTP data and calculates Viral Load\nBinds all DPH COVID data"
  },
  {
    "objectID": "code/processing_final/1_cleaning.html#load-packages",
    "href": "code/processing_final/1_cleaning.html#load-packages",
    "title": "Raw data cleaning",
    "section": "Load packages",
    "text": "Load packages"
  },
  {
    "objectID": "code/processing_final/1_cleaning.html#load-raw-data",
    "href": "code/processing_final/1_cleaning.html#load-raw-data",
    "title": "Raw data cleaning",
    "section": "Load raw data",
    "text": "Load raw data\n\n# Load N1 data\nn1_stepone_v2 &lt;- read_csv(here(\"data/raw_data/updated_data/stepone_n1_FINAL_UPDATE.csv\")) #year 1 data\nn1_cfx_v2 &lt;- read_csv(here(\"data/raw_data/updated_data/cfx_n1_FINAL_UPDATE.csv\")) #year 2 data\n\n# Load N2 data\nn2_stepone_v2 &lt;- read_csv(here(\"data/raw_data/updated_data/stepone_n2_FINAL_UPDATE.csv\")) #year 1 data\nn2_cfx_v2 &lt;- read_csv(here(\"data/raw_data/updated_data/cfx_n2_FINAL_UPDATE.csv\")) #year 2 data\n\n# Load Plant data\nplant_v2 &lt;- read_csv(here(\"data/raw_data/updated_data/plant_data_UPDATED.csv\"))\n\n# Load COVID-19 Symptom data\ncovid_symptom &lt;- read_csv(here(\"data/raw_data/ga_covid_data/epicurve_symptom_date.csv\")) %&gt;% \n  filter(county==\"Clarke\") %&gt;% \n  select(symptom.date=`symptom date`, \n         cases, moving_avg_cases)\n\n#Load COVID-19 Confirmed Case Data\ncovid_case &lt;- read_csv(here(\"data/raw_data/ga_covid_data/epicurve_rpt_date.csv\")) %&gt;% \n  filter(county==\"Clarke\") %&gt;% \n  select(report_date, \n         cases, \n         moving_avg_cases)\n\n#Load COVID-19 Testing Data\ncovid_testing &lt;- read_csv(here(\"data/raw_data/ga_covid_data/pcr_antigen_col.csv\")) %&gt;% \n  filter(county==\"Clarke\") %&gt;% \n  select(collection_date = collection_dt, \n         pcr_tests = `ALL PCR tests performed`, \n         pcr_pos = `All PCR positive tests`, \n         pcr_pos_7dma = `7 day percent positive`,\n         pcr_pos_14dma = `14 day percent positive`)"
  },
  {
    "objectID": "code/processing_final/1_cleaning.html#cleaning-and-merging",
    "href": "code/processing_final/1_cleaning.html#cleaning-and-merging",
    "title": "Raw data cleaning",
    "section": "Cleaning and merging",
    "text": "Cleaning and merging\n\n1. qPCR data\n\nConvert non-detects to NAs\n\n#Select date, collection number, sample id/bio rep, target, and ct\n#Convert Undetermined Cts to NAs\n\n#StepOne N1\nn1_stepone_clean &lt;- n1_stepone_v2 %&gt;% select(c(sample_date, collection_num, sample_id, target, ct)) %&gt;% \n  mutate(ct=as.numeric(ifelse(ct==\"Undetermined\", NA, ct)))\n\n#StepOne N2\nn2_stepone_clean &lt;- n2_stepone_v2 %&gt;% select(c(sample_date, collection_num, sample_id, target, ct)) %&gt;% \n  mutate(ct=as.numeric(ifelse(ct==\"Undetermined\", NA, ct)))\n\n#CFX N1\nn1_cfx_clean &lt;- n1_cfx_v2 %&gt;% select(c(sample_date, collection_num, sample_id, target, ct)) %&gt;% \n  mutate(ct=as.numeric(ifelse(ct==\"Undetermined\", NA, ct)))\n\n#CFX N2\nn2_cfx_clean &lt;- n2_cfx_v2 %&gt;% select(c(sample_date, collection_num, sample_id, target, ct)) %&gt;% \n  mutate(ct=as.numeric(ifelse(ct==\"Undetermined\", NA, ct)))\n\n\n\nBind qPCR NA data sets\n\n#Bind qpcr data, this will be used for determining detection frequency\nqpcr_na &lt;- bind_rows(n1_stepone_clean, n2_stepone_clean, n1_cfx_clean, n2_cfx_clean) %&gt;% \n  mutate(\n    date = sample_date,\n    facility=substr(sample_id, 1,2), \n    #first two letters in sample_id is treatment facility ID\n    biological_replicate=substr(sample_id, nchar(sample_id), nchar(sample_id))) %&gt;% #last number in sample_id is the biological rep\n arrange(date, facility, target, biological_replicate) %&gt;% \n  select(date, facility, target, biological_replicate, collection_num, ct)#select necessary variables\n  \n#Save to processed data folder\nsaveRDS(qpcr_na, here(\"data/processed_data/qpcr_na.rds\"))\n\n\n\nCalculate LOD and LOQ for qPCR data\n\n#Determine the LOD and LOQ by plotting the Normal QQ-Plot\n#Code generated by Cody Dailey for Lott et al. 2023\nqqnorm.ct.n1.stepone &lt;- qqnorm(n1_stepone_clean$ct, plot.it = F) %&gt;% as.data.frame()\nqqnorm.ct.n2.stepone &lt;- qqnorm(n2_stepone_clean$ct, plot.it = F) %&gt;% as.data.frame()\nqqnorm.ct.n1.cfx &lt;- qqnorm(n1_cfx_clean$ct, plot.it = F) %&gt;% as.data.frame()\nqqnorm.ct.n2.cfx &lt;- qqnorm(n2_cfx_clean$ct, plot.it = F) %&gt;% as.data.frame()\n\n#Create function to compute LOD and lOQ based on plots\nqqnorm.Explorer.ct &lt;- function(qqnorm.ct){\n  qqnorm.ct &lt;- qqnorm.ct[which(complete.cases(qqnorm.ct)),]\n  qqnorm.ct &lt;- qqnorm.ct[order(qqnorm.ct$x),]\n  qqnorm.ct &lt;- cbind(qqnorm.ct, rbind(NA, qqnorm.ct[-nrow(qqnorm.ct),])) %&gt;% setNames(., nm = c(\"x\", \"y\", \"x-1\", \"y-1\"))\n  qqnorm.ct %&lt;&gt;% mutate(rise = y-`y-1`, run = x-`x-1`) %&gt;% mutate(slope = rise / run)\n  qqnorm.ct$lod &lt;- NA\n  qqnorm.ct$loq &lt;- NA\n  prev.slope &lt;- 1\n  lod.found &lt;- 0\n  for(i in nrow(qqnorm.ct):2){\n    if(lod.found==0){\n      if(qqnorm.ct$slope[i]&lt;1 & prev.slope &lt;1){\n        qqnorm.ct$lod[i] &lt;- 1\n        lod.found &lt;- 1\n      }else{\n        prev.slope &lt;- qqnorm.ct$slope[i]\n      }\n    }\n    if(lod.found==1){\n      if(qqnorm.ct$slope[i]&gt;1){\n        qqnorm.ct$loq[i] &lt;- 1\n        break\n      }else{\n        prev.slope &lt;- qqnorm.ct$slope[i]\n      }\n    }\n  }\n  lod.ct &lt;- qqnorm.ct$y[which(qqnorm.ct$lod==1)]\n  loq.ct &lt;- qqnorm.ct$y[which(qqnorm.ct$loq==1)]\n  return(list(qqnorm.dataset = qqnorm.ct, lod = lod.ct, loq = loq.ct))\n}\n\n#Run function on each data set\nqqnorm.ct.n1.stepone &lt;- qqnorm.Explorer.ct(qqnorm.ct.n1.stepone)\nqqnorm.ct.n2.stepone &lt;- qqnorm.Explorer.ct(qqnorm.ct.n2.stepone)\nqqnorm.ct.n1.cfx &lt;- qqnorm.Explorer.ct(qqnorm.ct.n1.cfx)\nqqnorm.ct.n2.cfx &lt;- qqnorm.Explorer.ct(qqnorm.ct.n2.cfx)\n\n#Save LOD and LOQ for each data set\nn1_stepone_lod &lt;- qqnorm.ct.n1.stepone$lod\nn1_stepone_loq &lt;- qqnorm.ct.n1.stepone$loq\nn2_stepone_lod &lt;- qqnorm.ct.n2.stepone$lod\nn2_stepone_loq &lt;- qqnorm.ct.n2.stepone$loq\n\nn1_cfx_lod &lt;- qqnorm.ct.n1.cfx$lod\nn1_cfx_loq &lt;- qqnorm.ct.n1.cfx$loq\nn2_cfx_lod &lt;- qqnorm.ct.n2.cfx$lod\nn2_cfx_loq &lt;- qqnorm.ct.n2.cfx$loq\n\nsaveRDS(n1_stepone_lod, here(\"data/processed_data/n1_stepone_lod.rds\"))  \nsaveRDS(n2_stepone_lod, here(\"data/processed_data/n2_stepone_lod.rds\"))\nsaveRDS(n1_cfx_lod, here(\"data/processed_data/n1_cfx_lod.rds\"))\nsaveRDS(n2_cfx_lod, here(\"data/processed_data/n2_cfx_lod.rds\"))\n\n\n\nCalculate half of cp/uL LoQ\n\n#Calculate half LOQ for each assay, to assign to rows greater than LoQ\n#Units = copies per uL of reaction (multiply by 10 for starting quant)\n\nn1_stepone_half_loq &lt;- as.numeric(10^((n1_stepone_loq-34.008)/-3.389)/2)\n\nn2_stepone_half_loq &lt;- as.numeric(10^((n2_stepone_loq-32.416)/-3.3084)/2)\n\nn1_cfx_half_loq &lt;- as.numeric(10^((n1_cfx_loq-36.046)/-3.5293)/2)\n\nn2_cfx_half_loq &lt;- as.numeric(10^((n2_cfx_loq-37.731)/-3.2505)/2)\n\n\n\nTransform Cq NAs, calculate copies/uL\n\n#Replace NAs with LoD (temporarily)\n#Use standard curve slope for each target to calculate copies per uL per rxn\n#Replace cp/uL for observations with Cqs &gt; LoQ with half cp/uL LoQ\n\n#StepOne N1\nn1_stepone_1 &lt;- n1_stepone_clean %&gt;% \n  mutate(ct = replace_na(ct, n1_stepone_lod),\n         copy_num_uL_rxn = as.numeric(10^((ct-34.008)/-3.389)),\n         copy_num_uL_rxn = ifelse(ct&gt;n1_stepone_loq,\n                                  n1_stepone_half_loq,\n                                  copy_num_uL_rxn))\n\n#StepOne N2\nn2_stepone_1 &lt;- n2_stepone_clean %&gt;% \n  mutate(ct = replace_na(ct, n2_stepone_lod),\n         copy_num_uL_rxn = as.numeric(10^((ct-32.416)/-3.3084)),\n         copy_num_uL_rxn = ifelse(ct&gt;n2_stepone_loq,\n                                  n2_stepone_half_loq,\n                                  copy_num_uL_rxn))\n\n#CFX N1\nn1_cfx_1 &lt;- n1_cfx_clean %&gt;% \n  mutate(ct = replace_na(ct, n1_cfx_lod), \n         copy_num_uL_rxn = as.numeric(10^((ct-36.046)/-3.5293)),\n         copy_num_uL_rxn = ifelse(ct&gt;n1_cfx_loq,\n                                  n1_cfx_half_loq,\n                                  copy_num_uL_rxn)) \n\n#CFX N2\nn2_cfx_1 &lt;- n2_cfx_clean %&gt;% \n  mutate(ct = replace_na(ct, n2_cfx_lod),\n         copy_num_uL_rxn = as.numeric(10^((ct-37.731)/-3.2505)),\n         copy_num_uL_rxn = ifelse(ct&gt;n2_cfx_loq,\n                                  n2_cfx_half_loq,\n                                  copy_num_uL_rxn)) \n\n\n#Visualize distributions\n#N1 StepOne\nn1_stepone_1 %&gt;% filter(ct&lt;n1_stepone_lod) %&gt;% ggplot(aes(ct)) + geom_histogram(binwidth = )\n\n\n\n#N2 StepOne\nn2_stepone_1 %&gt;% filter(ct&lt;n2_stepone_lod) %&gt;% ggplot(aes(ct)) + geom_histogram()\n\n\n\n#N1 CFX\nn1_cfx_1 %&gt;% filter(ct&lt;n1_cfx_lod) %&gt;% ggplot(aes(ct)) + geom_histogram()\n\n\n\n#N2 CFX\nn2_cfx_1 %&gt;% filter(ct&lt;n2_cfx_lod) %&gt;% ggplot(aes(ct)) + geom_histogram()\n\n\n\n#year one data has many non-detects, makes sense for earlier in pandemic\n\n\n\nBind qPCR data sets\n\n#Bind qpcr data\n#this will be used for calculating viral load\nqpcr_all &lt;- bind_rows(n1_stepone_1, n2_stepone_1, n1_cfx_1, n2_cfx_1) %&gt;% \n  mutate(\n    date = sample_date,\n    facility=substr(sample_id, 1,2), #first two letters in sample_id is facility ID\n    biological_replicate=substr(sample_id, nchar(sample_id), nchar(sample_id))) %&gt;% \n  #last number in sample_id is the biological rep\n arrange(date, facility, target, biological_replicate) %&gt;% \n  select(date, facility, target, biological_replicate, \n         collection_num, ct, copy_num_uL_rxn)#select necessary variables\n  \n#Save to processed data folder\nsaveRDS(qpcr_all, here(\"data/processed_data/qpcr_all1.rds\"))\nqpcr_all\n\n\n\n  \n\n\n\n\n\n\n2. Combine plant and qPCR data sets\n\n#Change plant variable names to match qPCR names, remove notes variable, convert millions of gallons to liters\nplant_v2 &lt;- plant_v2 %&gt;% \n  rename(collection_num = Collection, facility = wrf) %&gt;% \n  mutate(influent_flow_L = influent_flow_mg*1e6*231*(0.0254^3)*1000)\n\n#Merge and mutate\nqpcr_plant_all &lt;- merge(qpcr_all, plant_v2, \n                        by = c(\"collection_num\", \"facility\", \"date\"),\n                        all = T) %&gt;% \n  mutate(facility = as.factor(facility), #code each facility as a factor\n         facility = recode(facility, NO = \"A\", MI = \"B\", CC = \"C\"), \n         #de-identify treatment facility\n         facility = ordered(facility, levels = c(\"A\", \"B\", \"C\")), \n         #set facility factor levels\n         copy_num_L = copy_num_uL_rxn*20/5*60/280*1000*1000, \n         #calculate copies per L sample\n         viral_load = copy_num_L*influent_flow_L) %&gt;% \n        #calculate total copies per day (viral load) using flow data\n         drop_na(target) %&gt;% \n         select(!notes)\n\n#Save to processed data folder\nsaveRDS(qpcr_plant_all, here(\"data/processed_data/qpcr_plant_all.rds\"))\n\n\n\n3. Combine DPH COVID data sets\n\ncovid &lt;- full_join(\n  covid_symptom%&gt;%\n    select(cases.symptom.onset=cases, date=symptom.date), \n  covid_case%&gt;%\n    select(cases.reported=cases, date=report_date), \n  by = \"date\"\n) %&gt;% \n  full_join(\n    covid_testing%&gt;%\n      rename(date=collection_date), \n    by=\"date\"\n  ) %&gt;%\n  select(date, cases.symptom.onset, cases.reported, pcr_tests, pcr_pos, pcr_pos_7dma, pcr_pos_14dma) %&gt;% \n\n  mutate(prop_pos = pcr_pos/pcr_tests)\n\n#Save to processed data folder\nsaveRDS(covid, here(\"data/processed_data/all_covid_combined.rds\"))\ncovid"
  }
]