---
title: "Data cleaning and processing script"
author: "Leah Lariscy"
editor: visual
format:
  html:
    toc: true
    toc-depth: 3
theme: solar
---

## Load packages

```{r}
library(tidyverse)
library(skimr)
library(here)
library(ggplot2)
```

## Load data

```{r, message=FALSE}
here()
# Load CFX N1 data
n1_stepone <- read_csv(here("data/raw_data/stepone_n1.csv")) #year 1 data
n1_cfx <- read_csv(here("data/raw_data/cfx_n1.csv")) #year 2 data

# Load CFX N2 data
n2_stepone <- read_csv(here("data/raw_data/stepone_n2.csv")) #year 1 data
n2_cfx <- read_csv(here("data/raw_data/cfx_n2.csv")) #year 2 data

# Load Plant data
plant <- read_csv(here("data/raw_data/plant_data.csv"))

# Load COVID-19 Symptom data
covid_symptom <- read_csv(here("data/raw_data/ga_covid_data/epicurve_symptom_date.csv")) %>% 
  filter(county=="Clarke") %>% 
  select(symptom.date=`symptom date`, 
         cases, moving_avg_cases)

#Load COVID-19 Confirmed Case Data
covid_case <- read_csv(here("data/raw_data/ga_covid_data/epicurve_rpt_date.csv")) %>% 
  filter(county=="Clarke") %>% 
  select(report_date, 
         cases, 
         moving_avg_cases)

#Load COVID-19 Testing Data
covid_testing <- read_csv(here("data/raw_data/ga_covid_data/pcr_antigen_col.csv")) %>% 
  filter(county=="Clarke") %>% 
  select(collection_date = collection_dt, 
         pcr_tests = `ALL PCR tests performed`, 
         pcr_pos = `All PCR positive tests`, 
         pcr_pos_7dma = `7 day percent positive`,
         pcr_pos_14dma = `14 day percent positive`)

#Load CFX recovery data
recovery_output <- read_csv(here("data/raw_data/recovery_data.csv"))
recovery_input <- read_csv(here("data/raw_data/calfguard.csv"))
```

```         
```

## Description and glance at data

### Step One N1 Data (Year 1)

```{r}
#check for missing data
skim(n1_stepone) 

#count observations for each collection date, then visualize
n1_stepone %>% count(collection_num) %>% ggplot(aes(n)) +
  geom_histogram()
n1_stepone %>% ggplot(aes(collection_num)) + 
  geom_histogram(binwidth = 1) #max should be either 27 or 54

#count observations for each sample id/biological rep, then visualize
n1_stepone %>% count(sample_id) %>% ggplot(aes(n)) + 
  geom_histogram() #there should be 3 technical reps
```

### CFX N1 Data (Year 2)

`n1` \<- Waste water extracted RNA RT-qPCR results of SARS-CoV-2 N1 gene target

```{r}
#check for missing data
skim(n1_cfx) 

#count observations for each collection date, then visualize
n1_cfx %>% count(collection_num) %>% ggplot(aes(n)) +
  geom_histogram()
n1_cfx %>% ggplot(aes(collection_num)) + 
  geom_histogram(binwidth = 1) #max should be 54, dates with 108 could be a combination of 2 dates

#count observations for each sample id/biological rep, then visualize
n1_cfx %>% count(sample_id) %>% ggplot(aes(n)) + 
  geom_histogram() #there should be 3 technical reps
```

### Step One N2 Data (Year 1)

```{r}
#check for missing data
skim(n2_stepone) 

#count observations for each collection date, then visualize
n2_stepone %>% count(collection_num) %>% ggplot(aes(n)) +
  geom_histogram()
n2_stepone %>% ggplot(aes(collection_num)) + 
  geom_histogram(binwidth = 1) #max should either be 27 or 54

#count observations for each sample id/biological rep, then visualize
n2_stepone %>% count(sample_id) %>% ggplot(aes(n)) + 
  geom_histogram() #there should be 3 technical reps

```

### CFX N2 Data (Year 2)

`n2` \<- Waste water extracted RNA RT-qPCR results of SARS-CoV-2 N2 gene target

```{r}
#check for missing data
skim(n2_cfx) 

#count observations for each collection date, then visualize
n2_cfx %>% count(collection_num) %>% ggplot(aes(n)) +
  geom_histogram()
n2_cfx %>% ggplot(aes(collection_num)) + 
  geom_histogram(binwidth = 1) #max should be 54, dates with 108 could be a combination of 2 dates

#count observations for each sample id/biological rep, then visualize
n2_cfx %>% count(sample_id) %>% ggplot(aes(n)) + 
  geom_histogram() #there should be 3 technical reps
```

### Plant Data

`plant` \<- Flow data from three Water Reclamation Facilities (WRF) in Athens-Clarke County (ACC).

```{r}
#check for missing data
skim(plant) # 3 observations of TSS are missing, but this isn't important

#count observations for each date, visualize
plant %>% count(date) %>% ggplot(aes(n)) +
  geom_histogram() #there should be 3 observations for each date

```

### County-level COVID-19 Symptom Data

`covid_symptom` \<- Count of individuals who reported having symptoms of COVID-19 on a given day, subset to include only data from ACC. Accessed from Georgia Department of Public Health (GDPH) on 2023-01-31.

```{r}
skim(covid_symptom)
```

### County-level COVID-19 Case Data

`covid_case` \<- Count of confirmed cases of COVID-19 on a given day, subset to include only data from ACC. Accessed from GDPH on 2023-01-31.

```{r}
skim(covid_case)
```

### County-level COVID-19 Testing Data

`covid_testing` \<- Count of COVID-19 tests administered on a given day, subset to include only data from ACC. Accessed from GDPH on 2023-01-31.

```{r}
skim(covid_testing)
```

## Data cleaning and wrangling

Data sets:

1.  CFX N1 results
2.  CFX N2 results
3.  WWTP flow rate and total solids
4.  County-level COVID symptoms
5.  County-level COVID confirmed cases
6.  County-level COVID tests administered

### Remove unnecessary variables

```{r}
#N1
n1_1 <- n1_1 %>% select(c(sample_date, collection_num, sample_id, target, ct))
n1 <- n1 %>% select(c(sample_date, collection_num, sample_id, target, ct)) %>% 
  filter(between(sample_date, as.Date("2021-07-06") , as.Date("2022-12-21")))

#N2
n2_1 <- n2_1 %>% select(c(sample_date, collection_num, sample_id, target, ct))
n2 <- n2 %>% select(c(sample_date, collection_num, sample_id, target, ct)) %>% 
  filter(between(sample_date, as.Date("2021-07-06") , as.Date("2022-12-21")))
```

### Calculate SARS-CoV-2 concentrations from CFX data for both N1 and N2

n1 \<- n1 %\>% mutate(ct = as.numeric(ct),

Year1:

Year 2: copy_num_uL_rxn = as.numeric(10\^((ct-36.046)/-3.5293)), #use standard curve slope here

copy_num_uL_rxn = replace_na(copy_num_uL_rxn, 0.004), #replace NAs with limit of detection (0.004 copies per uL of the reaction)

run_date = as.Date(run_date))

```{r}
#year 1 N1 data here
n1_1 <- n1_1 %>% mutate(ct = as.numeric(ct), 
                copy_num_uL_rxn = as.numeric(10^((ct-34.008)/-3.389)),
                copy_num_uL_rxn = replace_na(copy_num_uL_rxn, 0.004))

#year 2 N1 data here
n1 <- n1 %>% mutate(ct = as.numeric(ct), 
              copy_num_uL_rxn = as.numeric(10^((ct-36.046)/-3.5293)), #use standard curve slope here
              copy_num_uL_rxn = replace_na(copy_num_uL_rxn, 0.004)) #replace NAs with limit of detection (0.004 copies per uL of the reaction)

#N2 year 1 data here
n2_1 <-n2_1 %>% mutate(ct = as.numeric(ct),
                copy_num_uL_rxn = as.numeric(10^((ct-32.416)/-3.3084)),
                copy_num_uL_rxn = replace_na(copy_num_uL_rxn, 0.004))

#N2 year 2 data here
n2 <- n2 %>% mutate(ct = as.numeric(ct),
              copy_num_uL_rxn = as.numeric(10^((ct-37.731)/-3.2505)),
              copy_num_uL_rxn = replace_na(copy_num_uL_rxn, 0.004))

```

### Combining year 1 and 2 data

```{r}
#N1
n1 <- bind_rows(n1_1, n1)
tibble(n1)

#N2
n2 <- bind_rows(n2_1, n2)
tibble(n2)
```

### Combining and cleaning CFX data

`wbe_year2` includes: date, facility, target, bio rep, collection number, ct, copies/uL/rxn, copies/L

```{r}

wbe_year2 <- bind_rows(n1, n2) %>% #combine dataframes with same variables
  mutate(
    date=as.Date(sample_date, format = "%d-%b-%y"), #change to date format
    facility=substr(sample_id, 1,2), #first two letters in sample_id is facility ID
    biological_replicate=substr(sample_id, nchar(sample_id), nchar(sample_id)), #last number in sample_id is the replicate number
    ct=as.numeric(ifelse(ct=="Undetermined", NA, ct)) #set NAs
  ) %>% 
  arrange(date, facility, target, biological_replicate) %>% 
  select(date, facility, target, biological_replicate, collection_num, ct, copy_num_uL_rxn) %>%
  mutate(facility = as.factor(facility), 
         facility = recode(facility, NO = "A", MI = "B", CC = "C"), 
         facility = ordered(facility, levels = c("A", "B", "C")), #set facility to factor and then set factor levels
         copy_num_L = copy_num_uL_rxn*20/5*60/280*1000*1000)
   

saveRDS(wbe_year2, here("data/processed_data/year2_cfx_clean.rds"))
wbe_year2
```

### Summarizing CFX data for downstream processing

`wbe_year2_avg` - copies/L is averaged across biological replicates

```{r}
wbe_year2_avg <- wbe_year2 %>% group_by(date,facility,target,collection_num) %>% 
  summarize(avg_copy_L = mean(copy_num_L), 
            avg_copy_uL_rxn = mean(copy_num_uL_rxn)) %>% 
  ungroup()
saveRDS(wbe_year2_avg, here("data/processed_data/year2_cfx_avg.rds"))
wbe_year2_avg
```

### Cleaning plant data

```{r}
plant_clean <- plant %>% 
  mutate(date = as.Date(date), #change to date format
         influent_flow_L = influent_flow_mg*1e6*231*(0.0254^3)*1000) %>%  #convert flow from millions of gallons to liters
  mutate(facility = as.factor(wrf), facility = recode(facility, NO = "A", MI = "B", CC = "C"), facility = ordered(facility, levels = c("A", "B", "C"))) %>% #set facility to factor and then set factor levels
   select(date, facility, influent_flow_L, influent_tss_mg_l)

saveRDS(plant_clean, here("data/processed_data/year2_plant_clean.rds"))
plant_clean
```

### Combining CFX and plant data

```{r}
n1_n2_plant <- left_join(wbe_year2, plant_clean, by = c("date", "facility")) %>% 
  mutate(total_copies = copy_num_L * influent_flow_L)

saveRDS(n1_n2_plant, here("data/processed_data/year2_cfx_plant_combined.rds"))
n1_n2_plant
```

### Combining all COVID data

```{r}
covid <- full_join(
  covid_symptom%>%
    select(cases.symptom.onset=cases, date=symptom.date), 
  covid_case%>%
    select(cases.reported=cases, date=report_date), 
  by = "date"
) %>% 
  full_join(
    covid_testing%>%
      rename(date=collection_date), 
    by="date"
  ) %>%
  select(date, cases.symptom.onset, cases.reported, pcr_tests, pcr_pos, pcr_pos_7dma, pcr_pos_14dma) %>% 

  mutate(prop_pos = pcr_pos/pcr_tests)

saveRDS(covid, here("data/processed_data/all_covid_combined.rds"))
covid
```

### Combining `n1_n2_plant` and `covid`

```{r}
all_data <- full_join(n1_n2_plant, covid, by = "date") %>% 
   filter(between(date, as.Date("2020-06-30") , as.Date("2022-12-21"))) 

saveRDS(all_data, here("data/processed_data/year2_all_data_combined.rds"))
all_data
```

### Cleaning recovery data sets

```{r}
#Start with recovery_output 
recovery_output_clean <- recovery_output %>% 
  mutate(ct = as.numeric(ct)) %>% 
  group_by(sample_id, cg_num) %>% 
  summarize(avg_ct = mean(ct)) %>% 
  separate(sample_id, into = c("facility", "collection_num", "rep"), sep = "_") %>% 
  mutate(collection_num = as.numeric(collection_num),
         copies_ul_rxn = 10^((avg_ct-30.7)/-3.238),
         copies_ul_sample = copies_ul_rxn *20/2*25/3*60/280) %>% 
  select(facility, collection_num, cg_num, copies_ul_sample, avg_ct) %>% 
  drop_na()

recovery_input_clean <- recovery_input %>% 
  mutate(ct = as.numeric(ct)) %>% 
  group_by(sample_id) %>% 
  summarize(avg_ct = mean(ct)) %>% 
  separate(sample_id, into = c("CG", "cg_num"), sep = "_") %>% 
  mutate(cg_num = as.numeric(cg_num),
         copies_ul_rxn = 10^((avg_ct-30.7)/-3.238),
         copies_ul_input = copies_ul_rxn *20/2*25/3*60/50*40/40000) %>% 
  select(cg_num, copies_ul_input, avg_ct) %>% 
  drop_na()
         
saveRDS(recovery_output_clean, here("data/processed_data/recovery_output_clean.rds"))
saveRDS(recovery_input_clean, here("data/processed_data/recovery_input_clean.rds"))
  
```

### Calculate percent positive of technical reps

This isn't super important, but I'm including anyways.

This will calculate the percent of positive technical replicates per biological replicate

```{r}
wbe_tr <- wbe_year2 %>% group_by(date, facility, target, biological_replicate) %>% 
  dplyr::summarise(
    n=n(), 
    n.miss=sum(is.na(ct)), 
    ct.mean=mean(ct,na.rm=T), 
    ct.sd=sd(ct,na.rm=T)
  ) %>% 
  mutate_all(function(x){ifelse(is.nan(x), NA, x)}) %>% 
  ungroup() %>% 
  mutate(n.pos = n - n.miss) %>% 
  mutate(pos = ifelse(n.pos > 0, "pos", "neg")) %>% 
  mutate(percent_pos = (n.pos/n)*100)
wbe_tr
```

#### Percent positive technical reps for N1 only

```{r}
wbe_tr_n1 <- wbe_year2 %>% group_by(date, facility, target, biological_replicate) %>% 
  filter(target == "N1") %>% 
  dplyr::summarise(
    n=n(), 
    n.miss=sum(is.na(ct)), 
    ct.mean=mean(ct,na.rm=T), 
    ct.sd=sd(ct,na.rm=T)
  ) %>% 
  mutate_all(function(x){ifelse(is.nan(x), NA, x)}) %>% 
  ungroup() %>% 
  mutate(n.pos = n - n.miss) %>% 
  mutate(pos = ifelse(n.pos > 0, "pos", "neg")) %>% 
  mutate(percent_pos = (n.pos/n)*100)
wbe_tr_n1
```

#### Percent positive N2 only

```{r}
wbe_tr_n2 <- wbe_year2 %>% group_by(date, facility, target, biological_replicate) %>% 
  filter(target == "N2") %>% 
  dplyr::summarise(
    n=n(), 
    n.miss=sum(is.na(ct)), 
    ct.mean=mean(ct,na.rm=T), 
    ct.sd=sd(ct,na.rm=T)
  ) %>% 
  mutate_all(function(x){ifelse(is.nan(x), NA, x)}) %>% 
  ungroup() %>% 
  mutate(n.pos = n - n.miss) %>% 
  mutate(pos = ifelse(n.pos > 0, "pos", "neg")) %>% 
  mutate(percent_pos = (n.pos/n)*100)
wbe_tr_n2
```

### Calculate percent positive per biological replicate

`pos_rate_tr` will calculate the percent of positive technical replicates, averaged across biological replicates, within each sample's targets (N1 and N2)

`percent_pos_bio` will calculate percent of positive biological replicates for each target

```{r}
wbe_br <- wbe_tr %>%
  group_by(date, facility, target) %>% 
  dplyr::summarise(
    n.bio = n(),
    n.bio.non.miss = sum(!is.na(ct.mean)),
    n.bio.miss = sum(is.na(ct.mean)),
    n.total = sum(n), 
    n.total.miss = sum(n.miss), 
    bio.ct.mean = mean(ct.mean, na.rm = T), 
    bio.ct.sd = sd(ct.mean, na.rm=T), 
    pos_rate_tr = mean(percent_pos)) %>%
  mutate(percent_pos_bio = (n.bio.non.miss/n.bio)*100) %>% 
  mutate_all(function(x){ifelse(is.nan(x), NA, x)}) %>% 
  ungroup()
wbe_br
saveRDS(wbe_br, here("data/processed_data/prop_pos_bio.rds"))
```

### Calculate percent positive per sample

`pos_rate_tr` calculates the percent of positive technical replicates, averaged across all biological replicates and averaged across both targets

`prop.pos` calculates percent of positive targets for each sample

```{r}
wbe_samp <- wbe_br %>%
  group_by(date, facility) %>% 
  dplyr::summarise(
    n.pos = sum(!is.na(bio.ct.mean)),
    n.miss = sum(is.na(bio.ct.mean)),
    pos_rate_tr = mean(pos_rate_tr)) %>%
   mutate(prop.pos = n.pos/(n.pos+n.miss)*100) %>% 
  #mutate_all(function(x){ifelse(is.nan(x), NA, x)}) %>% 
  ungroup()
 
wbe_samp
saveRDS(wbe_samp, here("data/processed_data/prop_pos_sample.rds"))
```

### Calculate percent positive per collection date

```{r}
wbe_coll <- wbe_samp %>%
  group_by(date) %>% 
  dplyr::summarise(
    n.pos = sum(!is.na(n.pos)),
    n.miss = sum(is.na(n.miss)),
    pos_rate_tr = mean(pos_rate_tr)) %>%
   mutate(prop.pos = n.pos/(n.pos+n.miss)*100) %>% 
  #mutate_all(function(x){ifelse(is.nan(x), NA, x)}) %>% 
  ungroup()
```

### Combine all data: wastewater, clinical cases, percent positive

```{r}
final_data <- full_join(all_data, wbe_samp, by = c("date", "facility")) %>% 
  mutate(log10_VL = log10(total_copies), percent_pos_test = prop_pos*100) %>% 
  drop_na(facility)


saveRDS(final_data, here("data/processed_data/final_combined_data.RDS"))

```

### Summarize data across treatment facilities then average across targets

Group by: Date, Collection number

Keep: total copies, pos_rate_tr, log10 total copies, % positive tests

```{r}
final_data_sum <- final_data %>% group_by(date, collection_num, target) %>% 
  summarize(sum_total_copies = sum(total_copies),
            pos_rate_tr = mean(pos_rate_tr),
            percent_pos_test = mean(percent_pos_test),
            case_7dma = mean(pcr_pos_7dma),
            pcr_pos = mean(pcr_pos),
            test_admin = mean(pcr_tests)) %>% 
  ungroup(target) %>% 
  summarize(avg_VL = mean(sum_total_copies),
            pos_rate_tr = mean(pos_rate_tr),
            percent_pos_test = mean(percent_pos_test),
            case_7dma = mean(case_7dma),
            pcr_pos = mean(pcr_pos),
            test_admin = mean(test_admin)) %>% 
  ungroup() %>% 
  mutate(log10_VL = log10(avg_VL)) %>% 
  drop_na()

#table1::label(final_data_sum$log10_VL) <- "Log10 Viral Load"
#table1::label(final_data_sum$pos_rate_tr) <- "Assay Positivity"
#table1::label(final_data_sum$case_7dma) <- "Clinical Case Seven-Day Moving Average"
#table1::label(final_data_sum$pcr_pos) <- "Daily Reported Clinical Cases"
#table1::label(final_data_sum$percent_pos_test) <- "PCR Test Positivity"

saveRDS(final_data_sum, here("data/processed_data/final_sum_combined_data.RDS"))

final_data_sum

```

```{r}

table1 <- (table1(~ log10_VL + pos_rate_tr + case_7dma + pcr_pos + percent_pos_test, data=final_data_sum)) 
saveRDS(table1, here("results/manuscript_table1.rds"))
```
